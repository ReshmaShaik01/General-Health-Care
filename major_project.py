# -*- coding: utf-8 -*-
"""major project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GbhfcETlSgnX-BNasg0cs7GW89gEqtqq
"""

import pandas as pd
from sklearn.model_selection import train_test_split

# Load the dataset
file_path = '/content/CVD_cleaned.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the dataset
data.head()

from sklearn.preprocessing import LabelEncoder

# Encode categorical variables
label_encoders = {}
for column in data.select_dtypes(include=['object']).columns:
    label_encoders[column] = LabelEncoder()
    data[column] = label_encoders[column].fit_transform(data[column])

# Define features (X) and target (Y)
X = data.drop('Heart_Disease', axis=1)
Y = data['Heart_Disease']

# Split the dataset
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

X_train.shape, X_test.shape, Y_train.shape, Y_test.shape

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = '/content/CVD_cleaned.csv'  # Update the path
data = pd.read_csv(file_path)

# Encode categorical variables
label_encoders = {}
for column in data.select_dtypes(include=['object']).columns:
    label_encoders[column] = LabelEncoder()
    data[column] = label_encoders[column].fit_transform(data[column])

# Define features (X) and target (Y)
X = data.drop('Heart_Disease', axis=1)
Y = data['Heart_Disease']

# Split the dataset
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Initialize the models
svm_model = SVC()
rf_model = RandomForestClassifier()
lr_model = LogisticRegression(max_iter=1000)

import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
file_path = '/content/CVD_cleaned.csv'  # Update the path
data = pd.read_csv(file_path)

# Encode categorical variables
label_encoders = {}
for column in data.select_dtypes(include=['object']).columns:
    label_encoders[column] = LabelEncoder()
    data[column] = label_encoders[column].fit_transform(data[column])

# Define features (X) and target (Y)
X = data.drop('Heart_Disease', axis=1)
Y = data['Heart_Disease']

# Split the dataset
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Initialize the models
svm_model = SVC()
rf_model = RandomForestClassifier()
lr_model = LogisticRegression(max_iter=1000)

# Train and predict using SVM
svm_model.fit(X_train, Y_train)
svm_pred = svm_model.predict(X_test)

# Train and predict using Random Forest
rf_model.fit(X_train, Y_train)
rf_pred = rf_model.predict(X_test)

# Train and predict using Logistic Regression
lr_model.fit(X_train, Y_train)
lr_pred = lr_model.predict(X_test)

# Evaluate the models
models = ['SVM', 'Random Forest', 'Logistic Regression']
predictions = [svm_pred, rf_pred, lr_pred]

# Create a dictionary to store the performance results
model_performance = {}

for model_name, pred in zip(models, predictions):
    accuracy = accuracy_score(Y_test, pred)
    classification_rep = classification_report(Y_test, pred)
    confusion_mat = confusion_matrix(Y_test, pred)
    model_performance[model_name] = {
        "accuracy": accuracy,
        "classification_report": classification_rep,
        "confusion_matrix": confusion_mat
    }

# Display the performance
for model_name in models:
    print(f"Model: {model_name}")
    print("Accuracy Score:", model_performance[model_name]["accuracy"])
    print("Classification Report:\n", model_performance[model_name]["classification_report"])
    print("Confusion Matrix:\n", model_performance[model_name]["confusion_matrix"])
    print("\n")

# Plotting the comparison of the accuracies as a bar chart
accuracies = [model_performance[model]["accuracy"] for model in models]
plt.figure(figsize=(10, 6))
sns.barplot(x=models, y=accuracies)
plt.title('Model Accuracy Comparison')
plt.ylabel('Accuracy Score')
plt.show()



import pandas as pd
from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Load your dataset into a pandas DataFrame
# Replace 'your_dataset.csv' with your actual dataset path or URL
df = pd.read_csv('/content/CVD_cleaned.csv')

# Check the column names in your DataFrame
print(df.columns)

# Assuming df contains your features and target variable
# Define your features (X) and target (y)
# Adjust 'Heart_Disease' to your actual target column name if needed
X = df.drop('Heart_Disease', axis=1)
y = df['Heart_Disease']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(df.columns)

# Example to inspect first few rows of DataFrame
print(df.head())